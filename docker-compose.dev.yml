version: '3.8'

services: 
  # Nginx Router
  router:
    container_name: router_container
    build:
      # Build image using Dockerfile in router directory
      context: ./router
      dockerfile: dev.Dockerfile
    ports:
      # Map port external port (8080) to internal port (80)
      - '8080:80'
    depends_on:
      # Wait for other services to start before starting this service
      - client
      - server
    restart: unless-stopped
  # Angular Client
  client:
    container_name: client_container
    build:
      # Build image using Dockerfile in client directory
      context: ./client
      dockerfile: dev.Dockerfile
    volumes:
      # Tell Docker to treat the node_modules directory in the container as a volume
      # This prevents the host node_modules directory from overwriting the container's,
      # which prevents incompatibility due to environments (e.g. Windows/Mac host and Linux container) 
      - '/app/node_modules'
      # Map rest of client directory into container for live reload
      - './client:/app'  
    depends_on:
      # Wait for server to start before starting this service
      - server
    restart: unless-stopped
    healthcheck:
      # Define a health check test to determine whether the container is running properly
      test: node /app/healthcheck.js
      # Set number of consecutive failed tests required to be "unhealthy"
      retries: 3
      # Set amount of time between tests
      interval: 10s
      # Set max duration of test before it's considered an automatic failure
      timeout: 5s
      # Set an initial amount of time where failed tests are considered part of start-up and not counted toward retries
      start_period: 30s
  # Flask Server
  server:
    container_name: server_container
    build:
      # Build image using Dockerfile in server directory
      context: ./server
      dockerfile: dev.Dockerfile
    env_file: 
      # Pass in environment variables file
      - dev.env
    volumes: 
      # Map server directory into container for live reload
      - './server:/app'
    depends_on:
      # Wait for database to start before starting this service
      - database
    restart: unless-stopped
  # PostgreSQL Database
  database:
    container_name: database_container
    build:
      # Build image using Dockerfile in database directory
      context: ./database
      dockerfile: dev.Dockerfile
    env_file: 
      # Pass in environment variables file
      - dev.env
    volumes:
      # Map database data to Docker volume so that it will persist after container stops
      - 'database-data:/var/lib/postgresql/data'
    restart: unless-stopped
    healthcheck:
      # Define a health check test to determine whether the container is running properly
      test: pg_isready -U postgres || exit 1
      # Set number of consecutive failed tests required to be "unhealthy"
      retries: 3
      # Set amount of time between tests
      interval: 10s
      # Set max duration of test before it's considered an automatic failure
      timeout: 5s
      # Set an initial amount of time where failed tests are considered part of start-up and not counted toward retries
      start_period: 30s

volumes: 
  # Have Docker create volume for database data
  database-data:
